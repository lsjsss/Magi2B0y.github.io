<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用攻击工具命令</title>
      <link href="/2022/08/20/Common-attack-tools-Commands/"/>
      <url>/2022/08/20/Common-attack-tools-Commands/</url>
      
        <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>1. sqlmap</h1><h2 id="sqlmap注入检测">sqlmap注入检测</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>GET参数注入</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” <br> sqlmap默认测试所有的GET和POST参数，但可以手动用-p参数设置想要测试的参数。例如：-p “id,user-anget” <br> 当使用–level的值很大但是有个别参数不想测试的时候可以使用–skip参数</td></tr><tr><td>POST参数注入</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1”  --data=“id=1” <br> <a href="http://sqlmap.py">sqlmap.py</a> -r “c:\Users\fendo\Desktop\post.txt” -p n --dbs (-r表示加载一个文件，-p指定参数)</td></tr><tr><td>cookie注入 （level&gt;=2时才会检测cookie）</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” --level 2 <br> sqlmap  -r “/root/1.txt” (POST注入过程中，用 * 号指定cookie，这样就可以检测cookie。)</td></tr><tr><td>user-agent注入</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” --level 3 <br> sqlmap  -r “/root/1.txt” (POST注入过程中，用 * 号指定user-agent，这样就可以检测user-agent。)</td></tr><tr><td>referer注入</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” --level 3 <br> sqlmap -r root/1.txt&quot; (POST注入过程中，用 * 号指定referer，这样就可以检测referer。)</td></tr><tr><td>host注入</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” --level 5 <br> sqlmap -r root/1.txt&quot; (POST注入过程中，用 * 号指定referer，这样就可以检测referer。)</td></tr></tbody></table><h2 id="sqlmap获取数据库信息">sqlmap获取数据库信息</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>查看数据库</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” --dbs  --batch</td></tr><tr><td>查看数据库里面的表</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” -D security --tables --batch</td></tr><tr><td>查看数据库表里面的列</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” -D security -T users --columns   --batch</td></tr><tr><td>查看数据库列里面的具体的值</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” -D security -T users -C password --dump  --batch</td></tr></tbody></table><h2 id="sqlmap获取shell">sqlmap获取shell</h2><p>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1”  --os-shell</p><h1>2. nmap</h1><h2 id="附加参数介绍">附加参数介绍</h2><table><thead><tr><th>附加参数</th><th>作用</th></tr></thead><tbody><tr><td>-Pn</td><td>防止NMAP的发送初始数据包到目标机器，不检测主机存活</td></tr><tr><td>-p-</td><td>将扫描所有65535个端口</td></tr><tr><td>-D</td><td>ip地址欺骗 <br>  nmap -D RND:5 <code>ip</code> (RND:为生成随机ip地址)</td></tr><tr><td>-p</td><td>指定端口扫描</td></tr><tr><td>-A</td><td>全面扫描，综合扫描，是一种完整扫描目标信息的扫描方式</td></tr><tr><td>-O</td><td>nmap进行OS探测</td></tr><tr><td>-sS</td><td>TCP、SYN扫描（匿名扫描，默认不加类型，需要root权限，扫描速度快）</td></tr><tr><td>-sT</td><td>TCP全连接扫描（不需要root权限，TCP扫描的默认模式，端口状态和SYN相同，耗时长）</td></tr><tr><td>-sU</td><td>UDP扫描（扫描DNS，SNMP和DHCP等服务，更慢更困难）</td></tr><tr><td>-sI</td><td>用于闲置扫描和发送数据包欺骗</td></tr><tr><td>-sV</td><td>指定nmap进行版本探测</td></tr></tbody></table><h2 id="利用脚本扫描">利用脚本扫描</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>默认脚本扫描，主要搜索各种应用服务的信息，收集后，可再针对具体服务进行攻击</td><td>nmap --script=default 192.168.88.131</td></tr><tr><td>检查是否存在常见漏洞</td><td>nmap --script=vuln 192.168.1.104</td></tr><tr><td>提供暴力破解的方式，可对数据库、smb、snmp等进行简单密码的暴力猜解</td><td>nmap --script=brute 192.168.88.131</td></tr><tr><td>利用FTP指定脚本对目标特定FTP协议进行密码爆破</td><td>nmap --script=ftp-brute.nse 192.168.88.131</td></tr><tr><td>利用第三方的数据库或资源，例如进行whoise解析</td><td>nmap --script=external 192.168.88.131</td></tr><tr><td>利用已知的漏洞入侵系统</td><td>exploit</td></tr><tr><td>模糊测试的脚本，发送异常的包到目标机，探测出潜在的漏洞</td><td>fuzzer</td></tr></tbody></table><h1>3. hydra</h1><h2 id="附加参数介绍-v2">附加参数介绍</h2><table><thead><tr><th>附加参数</th><th>作用</th></tr></thead><tbody><tr><td>-l</td><td>小写，指定用户名进行破解</td></tr><tr><td>-L</td><td>大写，指定用户的用户名字典</td></tr><tr><td>-p</td><td>小写，用于指定密码破解，很少使用，一般采用密码字典</td></tr><tr><td>-P</td><td>大写，用于指定密码字典</td></tr><tr><td>-e ns</td><td>额外的选项，n：空密码试探，s：使用指定账户和密码试探</td></tr><tr><td>-M</td><td>指定目标ip列表文件，批量破解</td></tr><tr><td>-o</td><td>指定结果输出文件</td></tr><tr><td>-f</td><td>找到第一对登录名或者密码的时候中止破解</td></tr><tr><td>-t tasks</td><td>同时运行的线程数，默认是16</td></tr><tr><td>-w time</td><td>设置最大超时时间，单位</td></tr><tr><td>-v / -V</td><td>显示详细过程</td></tr><tr><td>-R</td><td>恢复爆破（如果破解中断了，下次执行 hydra -R /path/to/hydra.restore 就可以继续任务。）</td></tr><tr><td>-x</td><td>自定义密码</td></tr></tbody></table><h2 id="爆破">爆破</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>破解ssh</td><td>hydra -l 用户名 -p 密码 -t 线程数 -vV -e ns <code>ip</code> ssh <br> hydra -l 用户名 -p 密码 -t 线程数 -o save.log -vV <code>ip</code> ssh</td></tr><tr><td>破解ftp</td><td>hydra -l 用户名 -P 密码 -t 线程(默认16) -vV <code>ip</code> ftp <br> hydra -l 用户名 -P 密码 -e ns -vV <code>ip</code> ftp</td></tr><tr><td>get方式提交，破解web登录</td><td>hydra -l 用户名 -p 密码 -t 线程 -vV -e ns <code>ip</code> http-get /admin/ <br> hydra -l 用户名 -p 密码 -t 线程 -vV -e ns -f <code>ip</code> http-get /admin/index.php</td></tr><tr><td>post方式提交，破解web登录</td><td>hydra -t 3 -l admin -P pass.txt -o out.txt -f 10.36.16.18 http-post-form “login.php:id=<sup>USER</sup>&amp;passwd=<sup>PASS</sup>: &lt;title&gt; wrong username or password &lt;/title&gt;” <br> （10.36.16.18目标ip，http-post-form表示破解是采用http的post方式提交的表单密码破解, &lt;title&gt; 中的内容是表示错误猜解的返回信息提示。）</td></tr><tr><td>破解https</td><td>hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https</td></tr><tr><td>破解teamspeak</td><td>hydra -l 用户名 -P 密码 -s 端口号 -vV ip teamspeak</td></tr><tr><td>破解cisco</td><td>hydra -P pass.txt 10.36.16.18 cisco <br> hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable</td></tr><tr><td>破解smb</td><td>hydra -l administrator -P pass.txt 10.36.16.18 smb</td></tr><tr><td>破解pop3</td><td>hydra -l muts -P pass.txt my.pop3.mail pop3</td></tr><tr><td>破解rdp</td><td>hydra ip rdp -l administrator -P pass.txt -V</td></tr><tr><td>破解http-proxy</td><td>hydra -l admin -P pass.txt http-proxy://10.36.16.18</td></tr><tr><td>破解imap</td><td>hydra -L user.txt -p secret 10.36.16.18 imap PLAIN <br> hydra -C defaults.txt -6 imap://[fe80::2c:31ff:fe12:ac11]:143/PLAIN</td></tr></tbody></table><h1>4. MSF</h1><h2 id="普通攻击流程">普通攻击流程</h2><blockquote><p>msfconsole</p><p>search <code>相关漏洞</code></p><p>use <code>exploit</code></p><p>show options</p><p>set LHOST <code>ip</code></p><p>exploit</p></blockquote><h2 id="反弹木马">反弹木马</h2><blockquote></blockquote><h1>5. FOFA</h1><h2 id="使用方法">使用方法</h2><table><thead><tr><th>语法</th><th>功能</th></tr></thead><tbody><tr><td>title=“beijing”</td><td>从标题中搜索“北京”</td></tr><tr><td>domain=“<a href="http://qq.com">qq.com</a>”</td><td>搜索根域名带有qq.com的网站</td></tr><tr><td>host=“<a href="http://qq.com">qq.com</a>”</td><td>搜索host内所有带有qq.com的域名</td></tr><tr><td>ip=“58.63.236.248”</td><td>搜索ip相关信息 <br> 支持ip段搜索： ip=“111.1.1.1/16”</td></tr><tr><td>port=“6379”</td><td>查找对应“6379”端口的资产</td></tr><tr><td>body=”网络空间测绘”</td><td>从html正文中搜索“网络空间测绘”</td></tr><tr><td>header=“elastic”</td><td>从http头中搜索“elastic”</td></tr><tr><td>icp=“京ICP证030173号”</td><td>查找备案号为“京ICP证030173号”的网站，搜索网站类型资产</td></tr><tr><td>cert=“baidu”</td><td>搜索证书(https或者imaps等)中带有baidu的资产</td></tr><tr><td>server==“Microsoft-IIS/10”</td><td>搜索IIS-10服务器</td></tr><tr><td>app=“Microsoft-Exchange”</td><td>搜索Microsoft-Exchange设备</td></tr><tr><td>is_fraud=false</td><td>排除仿冒/欺诈数据</td></tr><tr><td>is_honeypot=false</td><td>排除蜜罐数据，仅限FOFA高级会员使用</td></tr><tr><td>os=“centos”</td><td>搜索操作系统为CentOS资产</td></tr><tr><td>country=“CN”</td><td>搜索指定国家(编码)的资产</td></tr></tbody></table><h1>FTP远程连接命令</h1><h2 id="常用命令">常用命令</h2><div class="center"><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>连接FTP服务器</td><td>ftp <code>ip</code></td></tr><tr><td>下载文件</td><td>a) get <code>remote-file</code> <code>local-file</code> <br> b) mget <code>remote-files</code></td></tr><tr><td>上传文件</td><td>a) put <code>local-file</code> <code>remote-file</code> <br> b) mput <code>local-files</code></td></tr><tr><td>断开连接</td><td>bye</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于属性的可搜索加密</title>
      <link href="/2022/08/13/Attribute-based_searchable_encryption/"/>
      <url>/2022/08/13/Attribute-based_searchable_encryption/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 可搜索加密 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件供应链安全</title>
      <link href="/2022/07/08/Software-supply-chain-security/"/>
      <url>/2022/07/08/Software-supply-chain-security/</url>
      
        <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>1. 概念</h1><p>供应链攻击是一种危害和破坏性极强的网络攻击，是针对组织供应链（上游、中游、下游）中的薄弱环节实施的网络安全攻击，涉及范围广，且难以检测。</p><p>如今，软件的依赖关系非常普遍。 经常见到项目使用数百个开源依赖项来实现某种功能，而项目作者不必亲自编写该功能。这可能意味着大多数应用程序都包含并非项目作者创作的代码。第三方或开源依赖项中可能存在的漏洞多半是依赖项，因为项目作者不能像自己编写的代码那样严格控制这些依赖项，可能会在软件供应链中产生潜在的安全风险。</p><p>举个软件供应链攻击的例子：当恶意代码被故意加入依赖项中，使用该依赖项的供应链将代码分发给受害者时，就会发生这种攻击。 供应链攻击是真实存在的。攻击供应链的方法有很多：从直接以新贡献者的身份插入恶意代码到在别人不注意的情况下接管贡献者的帐户，甚至破解签名密钥来分发不属于正式依赖项的软件。软件供应链攻击本身很少是最终目标，但提供了一个让攻击者插入恶意软件或为将来的访问提供后门的机会。</p><h1>2. 软件供应链阶段</h1><p>软件供应链包括三个阶段：软件研发阶段、软件交付阶段、软件使用阶段，不同阶段的攻击面如下：</p><div class="center"><table><thead><tr><th>阶段</th><th>攻击面</th></tr></thead><tbody><tr><td>软件研发阶段</td><td>- IDE开发工具污染攻击<br> - 三方库漏洞和后门攻击<br> - 直接源码污染攻击</td></tr><tr><td>软件交付阶段</td><td>- 软件存储替换和篡改攻击<br> - 传输劫持和捆绑下载攻击</td></tr><tr><td>软件使用阶段</td><td>- 升级劫持污染攻击<br> - 运行环境后门和漏洞攻击<br> - 三方库0Day漏洞攻击</td></tr></tbody></table></div><h1>3. 漏洞来源类型</h1><ul><li>合法供应商引入的漏洞</li><li>篡改或伪造组件的漏洞</li><li>编码过程引入的漏洞</li><li>开源组件引入的漏洞</li></ul><h1>4. 软件供应链的攻击类型</h1><div class="center"><table><thead><tr><th>攻击类型</th><th>事件</th></tr></thead><tbody><tr><td>预留后门</td><td>2013 年 6 月 棱镜门事件</td></tr><tr><td>开发工具污染</td><td>2015 年 9 月 14 日 XcodeGhost 事件</td></tr><tr><td>升级劫持</td><td>2017 年 6 月 27 日 NotPetya 勒索病毒事件</td></tr><tr><td>捆绑下载</td><td>2017 年 8 月 17 日 WireX BotNet 事件</td></tr><tr><td>源代码污染</td><td>2020 年 12 月 13 日 SolarWinds Orion 攻击事件</td></tr></tbody></table></div><h1>5. 软件供应链安全治理方法</h1><div class="center"><table><thead><tr><th>阶段</th><th>方法</th></tr></thead><tbody><tr><td>体系构建阶段</td><td>-  SDL 软件安全开发生命周期 <br> - DevSecOps ( <strong>核心理念</strong>：安全是整个 IT 团队每个人的责任，需要贯穿从开发到运营整个业务生命周期每一个环节才能提供有效保障)</td></tr><tr><td>设计阶段</td><td>- 软件供应商风险管理流程 <br> - 软件供应商评估模型 <br> - 软件供应商风险管理的作用</td></tr><tr><td>编码阶段</td><td>- 构建详细的软件物料清单 <br> - 使用基于 SCA 技术(软件成分分析)的工具</td></tr><tr><td>发布运营阶段</td><td>- 建立成熟的应急响应机制 <br> - 构建完善的运营保障工具链</td></tr></tbody></table></div><h1>6. 软件供应链安全应用实践</h1><div class="center"><table><thead><tr><th>应用</th><th>含义</th></tr></thead><tbody><tr><td>可信研发运营安全能力成熟度模型</td><td>汲取 SDL 与 DevSecOps 体系的优点，优化具体安全实践要素，是一种贯穿研发运营全生命周期的安全理念</td></tr><tr><td>云安全共享责任模型</td><td>云安全共享责任模型指出，在基础设施即服务（IaaS）、平台即服务（PaaS）和软件即服务（SaaS）三种不同的云服务模式下，云服务提供商（Cloud Service Provider，CSP）和客户之间需要分担的安全责任不同。CSP 需要承担客户在使用云服务时保障物理安全的责任，客户需要负责确保其解决方案及其数据被安全地识别、标记和正确的分类，以满足任何合规义务的责任，其余的责任则由 CSP 和客户共同承担。</td></tr><tr><td>Grafeas 开源计划</td><td>Grafeas 定义了一个 API 规范，用于管理软件资源，例如容器镜像、虚拟机镜像、JAR 文件和脚本。组织可以使用 Grafeas 来定义和聚合有关项目组件的信息。Grafeas 为组织提供了一个中央事实来源，用于在不断增长的软件开发团队和管道中跟踪和执行策略。构建工具、审计工具和合规性工具都可以使用 Grafeas API 来存储和检索有关各种软件组件的综合数据</td></tr></tbody></table></div><hr><h1>法律声明</h1><p>文章部分引用自悬镜安全与中国信息通信研究院联合制作的报告，转载或引用文章内容，不得进行如下活动：</p><p>不得擅自同意他人转载、引用本报告内容。</p><p>不得引用本报告进行商业活动或商业炒作。</p><p>本报告中的信息及观点仅供参考，悬镜安全及中国信息通信研究院对本报告拥有最终解释权</p><hr><p>ENDฅฅ</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习--KNN算法</title>
      <link href="/2022/06/30/Machine_Learning--KNN_algorithm/"/>
      <url>/2022/06/30/Machine_Learning--KNN_algorithm/</url>
      
        <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h2 id="1-概述">1. 概述</h2><p>KNN算法可以说是最简单的分类算法之一，同时，它也是最常用的分类算法之一，该算法是给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近的K个实例，这K个实例的多数属于某个类，就把该输入实例分类到这个类中，类似于现实生活中少数服从多数的思想。</p><p>下面通过一个简单的例子说明一下：如下图，绿色圆要被决定赋予哪个类，是红色三角形还是蓝色四方形？如果K=3，由于红色三角形所占比例为2/3，绿色圆将被赋予红色三角形那个类，如果K=5，由于蓝色四方形比例为3/5，因此绿色圆被赋予蓝色四方形类。</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/1-1.png"></div><h2 id="2-算法流程">2. 算法流程</h2><p>在训练集中数据和标签已知的情况下，输入测试数据，将测试数据的特征与训练集中对应的特征进行相互比较，找到训练集中与之最为相似的前K个数据，则该测试数据对应的类别就是K个数据中出现次数最多的那个分类，其算法的描述为：</p><ul><li>计算已知类别数据集中的点与当前点之间的距离</li><li>按距离递增次序排序</li><li>选取与当前点距离最小的k个点</li><li>统计前k个点所在的类别出现的频率</li><li>返回前k个点出现频率最高的类别作为当前点的预测分类</li></ul><p><strong>KNN取距离度量的方式:</strong></p><p><strong>距离计算：</strong></p><p>要度量空间中点距离的话，有好几种度量方式，比如常见的曼哈顿距离计算，欧式距离计算等等。不过通常KNN算法中使用的是欧式距离，这里只是简单说一下，拿二维平面为例，，二维空间两个点的欧式距离计算公式如下：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/2-1.png"></div><p>拓展到多维空间，则公式变成这样：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/2-2.png"></div><p>KNN算法最简单粗暴的就是将预测点与所有点距离进行计算，然后保存并排序，选出前面K个值看看哪些类别比较多。</p><p><strong>K值选择：</strong></p><p>在实际应用中，K值一般取一个比较小的数值，例如采用交叉验证法（简单来说，就是一部分样本做训练集，一部分做测试集）来选择最优的K值。</p><ul><li><p>如果选择较小的K值，就相当于用较小的领域中的训练实例进行预测，“学习”近似误差会减小，只有与输入实例较近或相似的训练实例才会对预测结果起作用，与此同时带来的问题是“学习”的估计误差会增大，换句话说，K值的减小就意味着整体模型变得复杂，容易发生过拟合；</p></li><li><p>如果选择较大的K值，就相当于用较大领域中的训练实例进行预测，其优点是可以减少学习的估计误差，但缺点是学习的近似误差会增大。这时候，与输入实例较远（不相似的）训练实例也会对预测器作用，使预测发生错误，且K值的增大就意味着整体的模型变得简单。</p></li><li><p>K=N，则完全不足取，因为此时无论输入实例是什么，都只是简单的预测它属于在训练实例中最多的类，模型过于简单，忽略了训练实例中大量有用信息。</p></li></ul><h2 id="3-KNN算法的特点与优缺点">3. KNN算法的特点与优缺点</h2><h3 id="3-1-特点">3.1 特点</h3><p>KNN是一种非参的，惰性的算法模型。</p><ul><li><p><strong>非参：</strong> 模型不会对数据做出任何的假设，与之相对的是线性回归（我们总会假设线性回归是一条直线）。也就是说KNN建立的模型结构是根据数据来决定的。</p></li><li><p><strong>惰性：</strong> 同样是分类算法，逻辑回归需要先对数据进行大量训练，最后才会得到一个算法模型。而KNN算法却不需要，它没有明确的训练数据的过程，或者说这个过程很快。</p></li></ul><h3 id="3-2-KNN算法的优势和劣势">3.2 KNN算法的优势和劣势</h3><p><strong>优点：</strong></p><ul><li>KNN算法简洁明了，模型训练时间快</li><li>预测效果好，对异常值不敏感</li></ul><p><strong>缺点：</strong></p><ul><li>对内存要求较高，因为该算法存储了所有训练数据</li><li>预测阶段可能很慢</li><li>对不相关的功能和数据规模敏感</li></ul><h2 id="4-KNN算法的应用">4. KNN算法的应用</h2><p><strong>开发样例：</strong> &lt;&gt;</p><p>在实现为用户推荐相似好友、生成每首歌的相似音乐和为用户提供推荐音乐三个功能上应用到了KNN算法</p><p><strong>数据源：</strong> 数据库中所有用户的听歌记录</p><p><strong>数据结果：</strong> 为所有用户生成相似好友，为每首歌生成相似歌曲，最后根据每首歌的相似歌曲和用户听歌记录来为用户提供推荐音乐</p><p>项目文件功能如下表：</p><div class="center"><table><thead><tr><th>文件名</th><th>功能</th></tr></thead><tbody><tr><td>main_function.py</td><td>顺序执行以下py文件</td></tr><tr><td>update_data_source.py</td><td>读取数据库中需要的数据，作为模型训练的数据集，存储在dataset下</td></tr><tr><td>other_user_recommend.py</td><td>训练得到所有用户的相似用户</td></tr><tr><td>user_listened_recommend.py</td><td>将训练得到的相似音乐和用户听歌记录相结合，得到所有用户的音乐推荐</td></tr><tr><td>insert_DB.py</td><td>将结果集重新存入数据库</td></tr></tbody></table></div><p>python文件的调用流程如下：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/4-1.png"></div><br>关键的模型训练部分代码如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_trainset_algo</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    KNN算法使用训练集进行训练</span></span><br><span class="line"><span class="string">    :return:训练结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    reader = Reader(line_format=<span class="string">&#x27;user item rating timestamp&#x27;</span>, sep=<span class="string">&#x27;\t&#x27;</span>,  rating_scale=(<span class="number">0</span>, <span class="number">100</span>),skip_lines=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 用户听歌记录文件路径</span></span><br><span class="line">    file_path = <span class="string">&quot;./dataset/user_record.txt&quot;</span></span><br><span class="line">    <span class="comment"># 加载数据集</span></span><br><span class="line">    data = Dataset.load_from_file(file_path, reader=reader)</span><br><span class="line">    <span class="comment"># 将数据集转换成矩阵形式</span></span><br><span class="line">    trainset = data.build_full_trainset()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(trainset.all_items())</span><br><span class="line">    <span class="built_in">print</span>(trainset.all_users())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基于物品的协同过滤算法，相似度衡量方法：皮尔逊相似度</span></span><br><span class="line">    <span class="comment"># 这是一个用户数量N，矩阵大小为 N*N 的稀疏矩阵，然后get_neighbors得到的是topK个相似用户。如果想要得到相似歌曲，则需要使用基于项目的协同过滤算法，</span></span><br><span class="line">    <span class="comment"># 或者从得到的相似用户中，提取他们的播放记录（这是基于用户的协同过滤算法）</span></span><br><span class="line">    sim_options = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;pearson_baseline&#x27;</span>, <span class="string">&#x27;user_based&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    <span class="comment"># 选择KNN算法</span></span><br><span class="line">    algo = KNNBaseline(sim_options=sim_options)</span><br><span class="line">    <span class="comment"># algo = KNNBasic(sim_options=sim_options)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练数据集</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始训练······&#x27;</span>)</span><br><span class="line">    algo.fit(trainset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;训练结束!!!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> algo</span><br></pre></td></tr></table></figure><p><strong>输出结果集：</strong></p><p>每首音乐的10首相似音乐：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/4-4.png"></div><p>为每位用户推荐的20首音乐：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/4-2.png"></div><p>为每位用户推荐的10位相似好友：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/4-3.png"></div><hr><p>在文章最后，介绍一下github开源项目不同 license 的具体含义</p><div class="center"><table><thead><tr><th>license</th><th>含义</th></tr></thead><tbody><tr><td>Apache</td><td>使用这个协议可以进行商用，可以对其修改、分发，但是要声明作者来源和你的修改以及协议。很多大型项目都使用这个协议，比如 tensorflow、puppeteer。</td></tr><tr><td>MIT</td><td>这是个人用得比较多的协议，因为比较宽松精简，只要声明版权和协议就可以了，可以商用、修改、复制、重新发布等操作。使用这个协议的就有vue、react等</td></tr><tr><td>BSD</td><td>这个和 MIT 协议类似，但未经事先明确书面许可，不得使用版权所有者的姓名或其贡献者的姓名来认可或推广从本软件衍生的产品，其它基本操作都可以使用。flask 用的就是这个协议。</td></tr><tr><td>GNU</td><td>可以私用也可以商用，但是必须声明来源，并且需要声明原有的协议，以及你的代码也必须开源出来。我们很熟悉的 Linux 就是采用这种协议。</td></tr><tr><td>NO</td><td>就是什么都不声明，但是并不意味着就可以乱来，这比声明了协议还严格。你可以使用、商用，但是你需要声明协议和来源，而且，你不能对代码进行修改、复制、再次发布。</td></tr><tr><td>Eclipse</td><td>这个协议允许你商用、复制、修改、再次发布等，需要声明来源和协议。像 java 中的 junit4 就是使用这个协议。</td></tr></tbody></table></div><p>以下以一张图来简单概述协议之间的区别：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/4-5.png"></div><p>更加详细的说明请查看 <a href="https://opensource.org/licenses/alphabetical">https://opensource.org/licenses/alphabetical</a></p><hr><p>ENDฅฅ</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/08/hello-world/"/>
      <url>/2022/04/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my Blog! This is my very first post.</p><p>my blog is based on <a href="https://hexo.io/">Hexo</a></p><p>Check: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a> for more info.</p><p>If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask the author on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server-at-localhost">Run server at localhost</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Clear-the-cache-file-and-the-generated-static-file">Clear the cache file and the generated static file</h3><p>When the website shows an exception, you can try this command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><hr><p><strong>END</strong></p>]]></content>
      
      
      <categories>
          
          <category> Welcome，欢迎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Welcome </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
